Include: setup.vader

# ---------------------------------------------------------------- # Parse due #

Execute (Parse due (date)):
  let scenarios = [
    \[':15'    , 1526428800, '16/05/18 00:00'],
    \[':10'    , 1528588800, '10/06/18 00:00'],
    \[':20'    , 1526774400, '20/06/18 00:00'],
    \[':153'   , 1552608000, '15/03/19 00:00'],
    \[':102'   , 1549756800, '10/02/19 00:00'],
    \[':201'   , 1547942400, '20/01/19 00:00'],
    \[':158'   , 1534291200, '15/08/18 00:00'],
    \[':108'   , 1533859200, '10/08/18 00:00'],
    \[':2010'  , 1539993600, '20/10/18 00:00'],
    \[':0202'  , 1549065600, '02/02/19 00:00'],
    \[':140117', 'throw'   , '14/01/17 00:00'],
  \]

Then (should parse date):
  for [due, date; _] in scenarios
    if date == 'throw'
      AssertThrow kronos#utils#date#parse_due(g_date_ref, due)
    else
      AssertEqual date, kronos#utils#date#parse_due(g_date_ref, due)
    endif
  endfor

Execute (Parse due (time)):
  let scenarios = [
    \['::15'  , 1526482800, '16/05/18 15:00'],
    \['::10'  , 1526464800, '16/05/18 10:00'],
    \['::20'  , 1526414400, '15/05/18 20:00'],
    \['::1515', 1526397300, '15/05/18 15:15'],
    \['::1530', 1526398200, '15/05/18 15:30'],
    \['::12'  , 1526472000, '16/05/18 12:00'],
    \['::080' , 1526457600, '16/05/18 08:00'],
    \['::0130', 1526434200, '16/05/18 01:30'],
    \['::16'  , 1526400000, '15/05/18 16:00'],
    \['::2000', 1526414400, '15/05/18 20:00'],
    \['::2330', 1526427000, '15/05/18 23:30'],
  \]

Then (should parse time):
  for [due, date; _] in scenarios
    AssertEqual date, kronos#utils#date#parse_due(g_date_ref, due)
  endfor

Execute (Parse due (date&time)):
  let scenarios = [
    \[':155:15'     , 1526482800, '16/05/18 15:00'],
    \[':160719:1821', 1563301260, '16/07/19 18:21'],
    \[':146:1420'   , 1528986000, '14/06/18 14:20'],
    \[':1406:1420'  , 1528986000, '14/06/18 14:20'],
    \[':1001:1001'  , 1547114460, '10/01/19 10:01'],
    \[':100118:1001', 'throw'   , '10/01/18 10:01'],
  \]

Then (should parse date and time):
  for [due, date; _] in scenarios
    if date == 'throw'
      AssertThrow kronos#utils#date#parse_due(g_date_ref, due)
    else
      AssertEqual date, kronos#utils#date#parse_due(g_date_ref, due)
    endif
  endfor

# ----------------------------------------------------------- # Print interval #

Execute (Print interval):
  let Interval = function('kronos#utils#date#interval')
  let d = kronos#utils#date#config().msec_in

  let scenarios = [
    \['1h 1min 1s', Interval(d.hour   + d.min    + d.sec)  ],
    \['1y 1mo 2d' , Interval(d.year   + d.month  + d.day*2)],
    \['1d 5h 2s'  , Interval(d.day    + d.hour*5 + d.sec*2)],
  \]

Then (should print interval):
  for [printed, interval] in scenarios
    AssertEqual printed, interval
  endfor

# --------------------------------------------------------------- # Print diff #

Execute (Print diff):
  let sec   = kronos#utils#date#config().msec_in.sec
  let min   = kronos#utils#date#config().msec_in.min
  let hour  = kronos#utils#date#config().msec_in.hour
  let day   = kronos#utils#date#config().msec_in.day
  let month = kronos#utils#date#config().msec_in.month
  let year  = kronos#utils#date#config().msec_in.year

  let scenarios = [
    \[g_date_ref       , g_date_ref+sec*42 , 'in 43s'  ],
    \[g_date_ref+sec*42, g_date_ref        , '43s ago' ],
    \[g_date_ref       , g_date_ref+min    , 'in 2min' ],
    \[g_date_ref+min   , g_date_ref        , '2min ago'],
    \[g_date_ref       , g_date_ref+hour-1 , 'in 60min'],
    \[g_date_ref+hour  , g_date_ref        , '2h ago'  ],
    \[g_date_ref       , g_date_ref+day-1  , 'in 24h'  ],
    \[g_date_ref+day   , g_date_ref        , '2d ago'  ],
    \[g_date_ref+month , g_date_ref        , '2mo ago' ],
    \[g_date_ref       , g_date_ref+year-1 , 'in 12mo' ],
    \[g_date_ref+year  , g_date_ref        , '2y ago'  ],
    \[g_date_ref       , g_date_ref+year*5 , 'in 6y'   ],
  \]

Then (should print diff):
  for [date_src, date_dest, diff] in scenarios
    AssertEqual diff, kronos#utils#date#diff(date_src, date_dest)
  endfor

# ----------------------------------------------------------------- # Worktime #

Execute (Worktime):
  let s = kronos#utils#date#config().msec_in

  let now = kronos#utils#date#localtime()
  let d16_at_h15 = 1526482800 " 16/05/2018, 15:00 GMT
  let d16_at_h18 = 1526493600 " 16/05/2018, 18:00 GMT
  let d16_at_h20 = 1526500800 " 16/05/2018, 20:00 GMT
  let d16_at_h22 = 1526508000 " 16/05/2018, 22:00 GMT
  let d17_at_h15 = 1526569200 " 17/05/2018, 15:00 GMT

  let scenarios = [
    \[
      \now, ['tag/a'],
      \[{'active': 0, 'start': [d16_at_h15], 'stop': [d16_at_h20], 'tags': ['tag/a', 'tag/b']}],
      \{'16/05/18': s.hour * 5},
    \],
    \[
      \now, ['tag/c'],
      \[{'active': 0, 'start': [d16_at_h15], 'stop': [d16_at_h20], 'tags': ['tag/a', 'tag/b']}],
      \{},
    \],
    \[
      \now, ['tag/a', 'tag/c'],
      \[{'active': 0, 'start': [d16_at_h15], 'stop': [d16_at_h20], 'tags': ['tag/a', 'tag/b']}],
      \{},
    \],
    \[
      \now, [],
      \[{'active': 0, 'start': [d16_at_h15], 'stop': [d16_at_h20], 'tags': []}],
      \{'16/05/18': s.hour * 5},
    \],
    \[
      \d16_at_h18, [],
      \[{'active': 0, 'start': [d16_at_h15], 'stop': [d16_at_h20], 'tags': []}],
      \{'16/05/18': s.hour * 5},
    \],
    \[
      \d16_at_h22, [],
      \[{'active': 1, 'start': [d16_at_h15], 'stop': [], 'tags': []}],
      \{'16/05/18': s.hour * 7},
    \],
    \[
      \d16_at_h18, [],
      \[{'active': 1, 'start': [d16_at_h15], 'stop': [], 'tags': []}],
      \{'16/05/18': s.hour * 3},
    \],
    \[
      \d16_at_h22, [],
      \[{'active': 1, 'start': [d16_at_h15, d16_at_h20], 'stop': [d16_at_h18], 'tags': []}],
      \{'16/05/18': s.hour * 5},
    \],
    \[
      \now, [],
      \[{'active': 0, 'start': [d16_at_h15], 'stop': [d17_at_h15], 'tags': []}],
      \{'16/05/18': s.hour * 8 + s.min * 59, '17/05/18': s.hour * 15},
    \],
  \]

Then (should calculate worktimes per day):
  for [date_ref, tags, tasks, worktimes] in scenarios
    AssertEqual worktimes, kronos#utils#date#worktime(tasks, tags, date_ref)
  endfor

  unlet s now d16_at_h15 d16_at_h18 d16_at_h20 d16_at_h22 d17_at_h15
